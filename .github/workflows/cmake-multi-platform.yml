# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Install NASM
        run: sudo apt install -y nasm

      - name: Download resource
        run: |
          mkdir ${{ github.workspace }}/bin && cd ${{ github.workspace }}/bin
          cp ../src/boot/run.sh .
          cp ../LICENSE .
          curl -O https://plos.pages.dev/resource/seabios.bin
          curl -O https://plos.pages.dev/resource/font1.plff
          curl -O https://plos.pages.dev/resource/font2.plff

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload (clang)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
        with:
          name: Plant-OS (clang)
          path: |
            ${{ github.workspace }}/bin/seabios.bin
            ${{ github.workspace }}/bin/run.sh
            ${{ github.workspace }}/bin/disk.img
            ${{ github.workspace }}/bin/hd.img
            ${{ github.workspace }}/bin/LICENSE
          compression-level: 9

      - name: Upload (gcc)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
        with:
          name: Plant-OS (gcc)
          path: |
            ${{ github.workspace }}/bin/seabios.bin
            ${{ github.workspace }}/bin/run.sh
            ${{ github.workspace }}/bin/disk.img
            ${{ github.workspace }}/bin/hd.img
            ${{ github.workspace }}/bin/LICENSE
          compression-level: 9
