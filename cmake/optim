# 优化选项
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  add_compile_flag("-fmodulo-sched") # 在第一次调度过程之前立即执行摇摆模调度 (gcc 默认关闭)
  add_compile_flag("-fsplit-loops") # 对于循环内的 if 语句，将其分割为两个循环 (gcc 默认关闭)
  add_compile_flag("-funswitch-loops") # 将具有循环不变条件的分支移出循环 (gcc 默认关闭)
  add_compile_flag("-fversion-loops-for-strides") # 迭代的步幅为变量时创建另一个版本的循环，该循环假定步幅始终为 1 (gcc 默认关闭)
  add_compile_flag("-fstdarg-opt") # 对于可变参数函数，优化这些参数的使用 (gcc 默认关闭)
  add_compile_flag("-fgcse") # 全局公共子表达式消除 (gcc O2)
  add_compile_flag("-fgcse-sm") #
  add_compile_flag("-fipa-icf") # 对函数和只读变量执行相同的代码折叠 (gcc O2)
  add_compile_flag("-fipa-pta") # 过程间指针分析 (gcc 默认关闭)
endif()
add_compile_flag("-fmerge-all-constants") # 合并所有常量
add_compile_flag("-fno-keep-static-consts") # 不保留 static 常量
add_compile_flag("-fomit-frame-pointer") # 删除小函数的栈帧 (gcc O1)
add_compile_flag("-ffast-math") # 优化浮点运算 (gcc Ofast)
