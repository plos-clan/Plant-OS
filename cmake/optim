# 优化选项

add_compile_flag("-fpie") # 生成位置无关代码

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  add_compile_flag("-fmodulo-sched") # 在第一次调度过程之前立即执行摇摆模调度 (gcc 默认关闭)
  add_compile_flag("-fsplit-loops") # 对于循环内的 if 语句，将其分割为两个循环 (gcc 默认关闭)
  add_compile_flag("-funswitch-loops") # 将具有循环不变条件的分支移出循环 (gcc 默认关闭)
  add_compile_flag("-fversion-loops-for-strides") # 迭代的步幅为变量时创建另一个版本的循环，该循环假定步幅始终为 1 (gcc 默认关闭)
  add_compile_flag("-fstdarg-opt") # 对于可变参数函数，优化这些参数的使用 (gcc 默认关闭)
  add_compile_flag("-fgcse") # 全局公共子表达式消除 (gcc O2)
  add_compile_flag("-fgcse-sm") #
  add_compile_flag("-fipa-icf") # 对函数和只读变量执行相同的代码折叠 (gcc O2)
  add_compile_flag("-fipa-pta") # 过程间指针分析 (gcc 默认关闭)
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 16)
    add_compile_flag("-fcx-limited-range") # 启用涉及复杂算术运算的基本代数扩展 (?)
  endif()
  add_compile_flag("-ffine-grained-bitfield-accesses") # 对具有合法宽度和对齐的连续位域运行使用单独的访问
  add_compile_flag("-fno-semantic-interposition") # 禁用语义插入
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 16)
    add_compile_flag("-fseparate-named-sections") # 对命名部分使用单独的段
  endif()
  add_compile_flag("-fshort-enums") # 为枚举类型分配声明的可能值范围所需的字节数
  add_compile_flag("-ftree-vectorize") # 启用树形向量化
  add_compile_flag("-ftree-slp-vectorize") # 启用树形 SLP 向量化
  add_compile_flag("-fsplit-lto-unit") # 将 LTO 单元拆分为更小的单元
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 16)
    add_compile_flag("-fgpu-approx-transcendentals") # 使用 GPU 近似超越函数
  endif()
  add_compile_flag("-fvectorize")
  add_compile_flag("-fwhole-program-vtables") # 启用整个程序 vtable 优化
  add_compile_flag("-fwrapv") # 将有符号整数溢出视为二进制补码
endif()

add_compile_flag("-fmerge-all-constants") # 合并所有常量
add_compile_flag("-fno-keep-static-consts") # 不保留 static 常量
add_compile_flag("-fomit-frame-pointer") # 删除小函数的栈帧 (gcc O1)
add_compile_flag("-ffast-math") # 优化浮点运算 (gcc Ofast)
add_compile_flag("-fstrict-enums") # 严格枚举
