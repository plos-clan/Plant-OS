
#ifndef _NAME
#  include "../00-include.h"
#  include "../cpu.h"
#  include "../resman.h"
#  include <data-structure.h>
#  include <define.h>
#  include <libc-base.h>
#  define _NAME TaskKernelPart
typedef struct _NAME _NAME;

typedef enum ThreadState {
  THREAD_IDLE,    // 线程被创建但未运行
  THREAD_RUNNING, // 线程正在运行
  THREAD_WAITING, // 线程正在等待
  THREAD_STOPPED, // 线程已暂停
  THREAD_DEAD,    // 线程已结束
} ThreadState;

typedef void (*cb_keyboard_t)(u8 data, u32 task);

#endif

struct _NAME {
  stack_frame  *esp;              //
  usize         cr3;              //
  bool          user_mode;        //
  usize         stack_bottom;     // ring0 栈底
  u32           running;          // 已经占用了多少时间片
  u32           timeout;          // 需要占用多少时间片
  char         *command_line;     // 运行程序所使用的命令行 (在单独的页面)
                                  //     最长为 4k - 1 字节
  int           floor;            //
  ThreadState   state;            //
  uint64_t      jiffies;          // 最后一次执行的全局时间片
  task_t        parent;           //
  cir_queue8_t  press_key_fifo;   // 基本输入设备的缓冲区
  cir_queue8_t  release_keyfifo;  // 基本输入设备的缓冲区
  cir_queue8_t  keyfifo;          // 基本输入设备的缓冲区
  cir_queue8_t  mousefifo;        // 基本输入设备的缓冲区
  cb_keyboard_t keyboard_press;   //
  cb_keyboard_t keyboard_release; //
  bool          fifosleep;        //
  bool          sigint_up;        //
  i32           status;           // 允许 0 到 255 的退出状态，绝对禁止负数
  u32           v86_mode;         // 8086模式
  u32           v86_if;           // 8086中断
  u32           rc;               // 引用计数
  list_t        waiting_list;     // 正在等待该线程的线程列表
  avltree_t     children;         // 子线程
  bool          is_switched;      // 是否是因其它进程请求切换过来的
  bool          fpu_enabled;      // 是否开启了 fpu/sse/avx
  resman_t      resman;           // 资源管理器
  i32           working_dir;      // 工作目录

#define CALL_LOG_MAX 256

#if __x86_64__
  struct {
    usize addr   : 63;
    usize is_ret : 1;
  } call_log[CALL_LOG_MAX];
#else
  struct {
    usize addr   : 31;
    usize is_ret : 1;
  } call_log[CALL_LOG_MAX];
#endif
  usize call_log_ptr;
};

#undef _NAME
